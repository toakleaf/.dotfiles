{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"data-testid=": {
		"scope": "javascript,javascriptreact",
		"prefix": "data-testid=",
		"body": [
			"data-testid=\"$1\""
		],
		"description": "add a data-test field for @testing-library/react"
	},
	"testBoilerplate": {
		"scope": "javascript,javascriptreact",
		"prefix": "testBoilerplate",
		"body": [
			"import React from 'react';",
			"import { render, cleanup } from '@testing-library/react';",
			"import '@testing-library/jest-dom'",
			"",
			"import { I18nextProvider } from 'react-i18next';",
			"import i18n from '../../../I18n/i18n';",
			"",
			"import $1 from '../$1';",
			"",
			"describe('<$1 />', () => {",
			"  afterEach(cleanup);",
			"",
			"  it('____________________', () => {",
			"    const { debug, getByDisplayValue } = render(",
			"      <I18nextProvider i18n={i18n}>",
			"        <$1 />",
			"      </I18nextProvider>,",
			"    );",
			"",
			"    debug();",
			"  });",
			"});"
		],
		"description": "boilerplate for basic test using @testing-library/react"
	}
}
